装饰者模式：动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。

利用组合(composition)和委托(delegation)可以在运行时具有继承行为的效果。

1.代码应该如同晚霞中的莲花一样地关闭(免于改变)，如同晨曦中的莲花一样地开放(能够扩展)

2.设计原则：类应该对扩展开放，对修改关闭
我们的目标是允许类容易扩展，在不修改现有的代码的情况下，就可以搭配新的行为。如能实现这样的目标，有什么好处呢？这样的设计具有弹性可以应对改变，
可以接受新的功能来应对改变的需求

要点：
1.继承属于扩展形式之一，但不见得是达到弹性设计的最佳方式

2.在我们的设计中，应该允许行为可以被扩展，而无需修改现有的代码

3.组合和委托可用于在运行时动态地加上新的行为

4.除了继承，装饰者模式也可以让我们扩展行为。

5.装饰者模式意味着一群装饰者类，这些类用来包装具体的组件。

6.装饰者类反映出被装饰的组件类型(事实上，他们具有相同的类型，都经过接口或继承实现)

7.装饰者可以在被装饰者的行为前面或后面加上自己的行为，甚至将被装饰者的行为整个取代掉，而达到特定的目的。

8.你可以用无数个装饰者包装一个组件

9.装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得很复杂。