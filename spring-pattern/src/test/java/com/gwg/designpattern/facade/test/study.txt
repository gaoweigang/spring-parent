想要使用外观模式，我们创建了一个接口简化而统一的类，用来包装子系统中一个或多个复杂的类。外观模式相当直接，很容易理解，这方面和许多其他的模式
不太一样。但这并不会降低它的威力：外观模式允许我们让客户和子系统之间避免紧耦合，而且稍后你还会看到，外观模式也可以帮我们遵守一个新的面向对象
原则。
外观模式的定义：外观模式提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。

OO原则：最少知识原则告诉我们要减少对象之间的交互，只留下几个"密友"，这就是说，当你正在设计一个系统，不管是任何对象，你都要注意它所交互的类有
那些，并注意它和这些类是如何交互的。
最少知识原则提供了一些方针，就任何对象而言，在该对象的方法内，我们只应该调用属于以下范围的方法：
①该对象本身
②被当做方法的参数而传递进来的对象
③此方法所创建或实例化的任何对象
④对象的任何组件(把组件想象成是实例化变量所引用的任何对象，换句话说，把这想象成是有一个"HAS-A"关系)