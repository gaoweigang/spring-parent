循环依赖
实例化bean是一个非常复杂的过程，而其中最难以理解的就是对循环依赖的解决，不管之前读者有没有对循环依赖方面的研究，这里有必要先对此知识点稍作回顾。

什么是循环依赖
循环依赖就是循环引用，就是两个或多个bean相互之间的持有对方，比如CircleA引用CircleB,CircleB引用CircleC,CircleC引用CircleA,则它们最终反映为
一个环。此处不是循环调用，循环调用是方法之间的环调用

循环调用是无法解决的，除非有终结条件，否则就是死循环，最终导致内存溢出错误。

Spring如何解决循环依赖
Spring容器循环依赖包括构造器循环依赖和setter循环依赖，那Spring容器如何解决循环依赖呢？首先让我们来定义循环引用类：

在Spring中将循环依赖的处理分成了3种情况。
1.构造器循环依赖
表示通过构造器注入构成的循环依赖，此依赖是无法解决的，只能抛出BeanCurrentlyInCreationException异常表示循环依赖。
如在创建TestA类时，构造器需要TestB类，那将去创建TestB,在创建TestB类时又发现需要TestC类，则又去创建TestC,最终在创建TestC时发现又需要TestA,
从而形成一个环，没办法创建。

Spring容器将每一个正在创建的bean标识符放在一个“当前创建bean池”中，bean标识符在创建过程中将一直保存在这个池中，因此如果在创建bean过程中发现
自己已经在“当前创建bean池”里时，将抛出BeanCurrentlyInCreationException异常表示循环依赖；而对于创建完毕的bean将从“当前创建bean池”中清除掉。


2.setter循环依赖
表示通过setter注入方式构成的循环依赖。对于setter注入造成的依赖是通过Spring容器提前暴露刚完成构造器注入但未完成其他步骤的
bean来完成的，而且只能解决单例作用于的bean循环依赖。通过提前暴露一个单例工厂方法，从而使其他bean能引用到该bean，如下代码所示：
addSingletonFactory(beanName, new ObjectFactory(){
    public Object getObject() throws BeanException{
        return getEarlyBeanReference(beanName, mbd, bean);
    }
})
































