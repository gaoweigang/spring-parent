状态模式定义：
状态模式允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。
这个描述中的第一部分附有相当多的涵义，是吧？因为这个模式将状态封装成为独立的类，并将动作委托到代表当前状态的对象，我们知道行为会随着内部状态
而改变。糖果机提供了一个很好的例子：当糖果机是在NoQuarterState或HasQuarterState两种不同的状态时，你投入25分钱，就会得到不同的行为(机器接受
25分钱和机器拒绝25分钱)。
而这个定义中的第二部分呢？一个对象“看起来好像修改了它的类”是什么意思呢？从客户的视角来看：如果说你使用的对象能够完全改变它的行为，那么你就会
觉得，这个对象实际上是从别的类实例化而来的。然而，实际上，你知道我们是在使用组合通过简单引用不同的状态对象来造成类改变的假象。


等一下，在我的记忆中，策略模式和这张类图根本就是一模一样。
好眼力！是的，类图是一样的，但是这两个模式的差别在于它们的“意图”。
以状态模式而言，我们将一群行为封装在状态对象中，Context的行为随时可以委托到那些状态对象中的一个。随着时间的流逝，当前状态在状态对象集合中游走
改变，以反映出Context的内部状态，因此，context的行为也会跟着改变。但是context的客户对于状态对象了解不多,甚至根本就是浑然不觉。
而以策略模式而言，客户通常主动指定Context所要组合的策略对象是哪一个。现在，固然策略模式让我们具有弹性，能够在运行时改变策略，但对于某个context
对象来说，通常都只有一个最适当的策略对象。

一般我们把策略模式想成是除了继承之外的一种弹性替代方案。如果你使用继承定义了一个类的行为，你将被这个行为困住，甚至要修改它都很难。有了策略模式，
你可以通过组合不同的对象来改变行为。

我们把状态模式想成是不用在context中放置许多条件判断的替代方案。通过将行为包装进状态对象中，你可以通过在context内简单地改变状态对象来改变context
的行为。